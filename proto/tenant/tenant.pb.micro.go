// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/tenant/tenant.proto

package tenant

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TenantService service

func NewTenantServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TenantService service

type TenantService interface {
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateRsp, error)
	Check(ctx context.Context, in *CheckReq, opts ...client.CallOption) (*CheckRsp, error)
}

type tenantService struct {
	c    client.Client
	name string
}

func NewTenantService(name string, c client.Client) TenantService {
	return &tenantService{
		c:    c,
		name: name,
	}
}

func (c *tenantService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*CreateRsp, error) {
	req := c.c.NewRequest(c.name, "TenantService.Create", in)
	out := new(CreateRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantService) Check(ctx context.Context, in *CheckReq, opts ...client.CallOption) (*CheckRsp, error) {
	req := c.c.NewRequest(c.name, "TenantService.Check", in)
	out := new(CheckRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TenantService service

type TenantServiceHandler interface {
	Create(context.Context, *CreateReq, *CreateRsp) error
	Check(context.Context, *CheckReq, *CheckRsp) error
}

func RegisterTenantServiceHandler(s server.Server, hdlr TenantServiceHandler, opts ...server.HandlerOption) error {
	type tenantService interface {
		Create(ctx context.Context, in *CreateReq, out *CreateRsp) error
		Check(ctx context.Context, in *CheckReq, out *CheckRsp) error
	}
	type TenantService struct {
		tenantService
	}
	h := &tenantServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TenantService{h}, opts...))
}

type tenantServiceHandler struct {
	TenantServiceHandler
}

func (h *tenantServiceHandler) Create(ctx context.Context, in *CreateReq, out *CreateRsp) error {
	return h.TenantServiceHandler.Create(ctx, in, out)
}

func (h *tenantServiceHandler) Check(ctx context.Context, in *CheckReq, out *CheckRsp) error {
	return h.TenantServiceHandler.Check(ctx, in, out)
}
